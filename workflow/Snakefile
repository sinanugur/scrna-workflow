from collections import defaultdict
from yaml import load
import os

from snakemake.utils import Paramspace
import pandas as pd



cellsnake_path=config.get('cellsnake_path','./')


configfile: "config.yaml"

files, = glob_wildcards("data/{sample}/raw_feature_bc_matrix/matrix.mtx.gz")    
others, = glob_wildcards("data/{sample}/outs/filtered_feature_bc_matrix/matrix.mtx.gz")
h5files, = glob_wildcards("data/{sample}/filtered_feature_bc_matrix.h5")
files=list(filter(lambda i: "/" not in i, files+others+h5files)) #do not capture subdirectories etc
print(files)

results_folder=config.get("results_folder","results")
#basic paramaters
min_cells=config.get("min_cells",3)
min_features=config.get("min_features",200)
percent_mt=config.get("percent_mt",10) #if not automatic, this will be used for all samples
percent_rp=config.get("percent_rp",0) #by default, no filtering on ribosomal genes percentage 
#min_coverage=config.get("min_coverage",1000)
highly_variable_features=config.get("highly_variable_features",2000)
doublet_filter= "--doublet.filter" if config.get("doublet_filter",True) in [True,"TRUE","True","T"] else ""

#automatic mt filtering
auto_mt_filtering=config.get("auto_mt_filtering",False)


#automatic cluster/resolution detection
#detect_resolution=config.get("detect_resolution",False)

#clustering and normalization paramaters
normalization_method=config.get("normalization_method","LogNormalize")
scale_factor=config.get("scale_factor",10000)
resolution=config.get("resolution",0.8)

#dimension reduction options: by default both UMAP and TSNE will be plotted with predicted clusters
umap_plot="--umap" if config.get("umap_plot",True) in [True,"TRUE","True","T"] else ""
tsne_plot="--tsne" if config.get("tsne_plot",True) in [True,"TRUE","True","T"] else ""

#Each marker plot contains a DimPlot, by default only UMAP plots will be created (to save space and time), this behavior can be changed.
umap_markers_plot="--umap" if config.get("umap_markers_plot",True) in [True,"TRUE","True","T"] else ""
tsne_markers_plot="--umap" if config.get("tsne_markers_plot",True) in [False,"TRUE","True","T"] else ""

#Differential expression paramaters
logfc_threshold=config.get("logfc_threshold",0.25)
test_use=config.get("test_use","wilcox")
marker_plots_per_cluster_n=config.get("marker_plots_per_cluster_n",50)


selected_markers_file=config.get("selected_markers_file","markers.tsv")

#GO enrichment paramaters
algorithm=config.get("algorithm","weight01")
statistics=config.get("statistics","ks")
mapping=config.get("mapping","org.Hs.eg.db")
ontology = config.get("ontology","BP")

#GSEA
gsea_file= config.get("gsea_file",cellsnake_path + "workflow/bundle/c2.cgp.v2022.1.Hs.symbols.gmt")
gesa_group= config.get("gsea_group","seurat_clusters")

#alternative routes
route=config.get("route","minimal") # select standard route for analysis
integration_id=config.get("integration_id","combined")
integration_resolution=str(config.get("resolution",0.8))
celltypist_model=config.get("celltypist_model","Immune_All_Low.pkl")


#initialization of paramspace object using defaults
def initialization_of_paramspace(tsv_file,dictionary):
    if os.path.isfile(tsv_file):
        par_df = pd.read_table(tsv_file) # if available and use for all samples
    else:
        par_df =  pd.DataFrame(dictionary) # if not available, create using default numbers and use for all samples
    
    return par_df

if auto_mt_filtering:
    par_df = initialization_of_paramspace("params.tsv",{"resolution":[resolution]})
    del par_df["MT"]
    paramspace=Paramspace(par_df)

else:
    par_df = initialization_of_paramspace("params.tsv",{"MT":[percent_mt],"resolution":[resolution]})
    paramspace=Paramspace(par_df)
    paramspace_mt=Paramspace(pd.DataFrame(par_df['MT']))


def dim_reduction_and_marker_plots(paramspace):
    plots=[]
    if umap_markers_plot:
        plots = plots + expand([results_folder + "/" + s + "/{params}/positive_marker_plots_umap/" for s in files],params=list(paramspace.instance_patterns))
    if tsne_markers_plot:
        plots = plots + expand([results_folder + "/" + s + "/{params}/positive_marker_plots_tsne/" for s in files],params=list(paramspace.instance_patterns))
    return plots

def selected_markers(paramspace):
    plots=[]
    if os.path.isfile(selected_markers_file):
        plots = plots + expand([results_folder + "/" + s + "/{params}/selected-markers-dotplot.pdf" for s in files],params=list(paramspace.instance_patterns))
        if umap_markers_plot:
            plots = plots + expand([results_folder + "/" + s + "/{params}/selected_marker_plots_umap" for s in files],params=list(paramspace.instance_patterns))
        if tsne_markers_plot:
            plots = plots + expand([results_folder + "/" + s + "/{params}/selected_marker_plots_tsne" for s in files],params=list(paramspace.instance_patterns))
    return plots

def sample_paramater(sample):
    try:
        par_df = pd.read_table(f"analyses/resolution_detection/{sample}/params.tsv")
        print(f"Autodetected resolution file found, will use this: analyses/resolution_detection/{sample}/params.tsv")
    except:
        par_df = initialization_of_paramspace("params.tsv",{"MT":[percent_mt],"resolution":[resolution]})

    if auto_mt_filtering:
        del par_df["MT"]

    paramspace=Paramspace(par_df)
    return [expand(["analyses/raw/" + sample + "/{params}.rds"], params=list(paramspace.instance_patterns)), 
            expand([results_folder + "/" + s + "/{params}/umap.plot.pdf" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/tsne.plot.pdf" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/number-of-cells-per-cluster.xlsx" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/positive-markers-forAllClusters.xlsx" for s in files],params=list(paramspace.instance_patterns)),
            dim_reduction_and_marker_plots(paramspace),
            selected_markers(paramspace),
            expand([results_folder + "/" + s + "/{params}/celltype_annotation/annotation.dotplot.pdf" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/celltype_annotation/annotation.tsne.pdf" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/celltype_annotation/annotation.umap.pdf" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/gsea/" for s in files],params=list(paramspace.instance_patterns))
            #expand([results_folder + "/" + s + "/{params}/GO-enrichment-" + ontology +  "-all_clusters.xlsx" for s in files],params=list(paramspace.instance_patterns))
            ]



include: "rules/seurat.smk"

if route == "minimal":
    rule all:
        input:
            [sample_paramater(sample) for sample in files]
    
elif route == "standard":
    rule all:
        input:
            expand(["analyses/raw/" + s + "/{params}.rds" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/number-of-cells-per-cluster.xlsx" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/positive-markers-forAllClusters.xlsx" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/umap.plot.pdf" for s in files],params=list(paramspace.instance_patterns)),
            expand([results_folder + "/" + s + "/{params}/tsne.plot.pdf" for s in files],params=list(paramspace.instance_patterns)),        
            dim_reduction_and_marker_plots(),
            selected_markers()

elif route == "detection":
    include: "rules/params_detect.smk"
    rule all:
        input:
            expand("analyses/resolution_detection/{sample}/params.tsv",sample=files)

    print("Now you may launch the standard analysis, which will use the predicted resolution...")

elif route == "others":
    rule all:
        input:
            expand(["results/{sample}/resolution-" + x + "/enrichment/GO-enrichment-all_clusters-ontology-{ontology}.xlsx".format(ontology=ontology) for x in resolution], sample=files)

elif route == "clustree" or route == "clusteringTree":
    rule all:
        input:
            #expand("results/{sample}/clusteringTree/clusteringTree.pdf",sample=files)
            expand([results_folder + "/" + s + "/{params}/clusteringTree/clusteringTree.pdf" for s in files],params=list(paramspace.instance_patterns))

elif route == "annotate":
    rule all:
        input:
            expand(["analyses/celltypist/" + x + "/{sample}.rds" for x in resolution],sample=files)



elif route == "integration":
    files, = glob_wildcards("analyses/processed/" + integration_resolution + "/{sample}.rds")
    rule all:
        input:
            "analyses/integration/harmony/" + integration_id + "_harmony.rds",
            "analyses/integration/seurat/" + integration_id + "_seurat.rds"

else:
    pass
