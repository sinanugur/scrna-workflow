from collections import defaultdict
from yaml import load
import os

files, = glob_wildcards("data/{sample}/raw_feature_bc_matrix/matrix.mtx.gz")
others, = glob_wildcards("data/{sample}/outs/filtered_feature_bc_matrix/matrix.mtx.gz")

files=list(filter(lambda i: "/" not in i, files+others))

print(files)

def input_function(wildcards):
    if os.path.isfile("data/" + wildcards.sample + "/raw_feature_bc_matrix/matrix.mtx.gz"):
        return("data/" + wildcards.sample + "/raw_feature_bc_matrix/")
    else:
        return("data/" + wildcards.sample + "/outs/filtered_feature_bc_matrix/")

    


include: "rules/seurat.smk"

resolution=config.get("resolution",["0.8","2.5"])
min_cells=config.get("min_cells",3)
min_features=config.get("min_features",200)
percent_mt=config.get("percent_mt",10)
min_coverage=config.get("min_coverage",1000)

normalization_method=config.get("normalization_method","LogNormalize")
scale_factor=config.get("scale_factor",10000)

logfc_threshold=config.get("logfc_threshold",0.25)
test_use=config.get("test_use","wilcox")


route=config.get("route","standart")



if route == "standart":
    rule all:
        input:
            expand("results/{sample}/clusteringTree/clusteringTree-{sample}.pdf",sample=files),
            expand(["results/{sample}/resolution-" + x + "/{sample}.positive-markers-forAllClusters.xlsx" for x in resolution],sample=files),
            expand(["results/{sample}/resolution-" + x + "/{sample}.number-of-cells-per-cluster.xlsx" for x in resolution],sample=files),
            expand("analyses/{sample}/rawrds/{sample}.rds",sample=files),
            expand("analyses/{sample}/processed/{sample}.rds",sample=files)

else:
    pass