from collections import defaultdict
from yaml import load
import os

from snakemake.utils import Paramspace
import pandas as pd

paramspace = Paramspace(pd.read_csv("params.tsv", sep="\t"))

configfile: "config.yaml"

files, = glob_wildcards("data/{sample}/raw_feature_bc_matrix/matrix.mtx.gz")    
others, = glob_wildcards("data/{sample}/outs/filtered_feature_bc_matrix/matrix.mtx.gz")
h5files, = glob_wildcards("data/{sample}/filtered_feature_bc_matrix.h5")
files=list(filter(lambda i: "/" not in i, files+others+h5files)) #do not capture subdirectories etc
print(files)
#basic paramaters
min_cells=config.get("min_cells",3)
min_features=config.get("min_features",200)
percent_mt=config.get("percent_mt",10)
min_coverage=config.get("min_coverage",1000)
highly_variable_features=config.get("highly_variable_features",2000)
doublet_filter= "--doublet.filter" if config.get("doublet_filter") in [True,"TRUE","True","T"] else "" #True or False

#clustering and normalization paramaters
normalization_method=config.get("normalization_method","LogNormalize")
scale_factor=config.get("scale_factor",10000)
resolution=[str(config.get("resolution",0.8))]

#Differential expression paramaters
logfc_threshold=config.get("logfc_threshold",0.25)
test_use=config.get("test_use","wilcox")

#GO enrichment paramaters
algorithm=config.get("algorithm","weight01")
statistics=config.get("statistics","ks")
mapping=config.get("mapping","org.Hs.eg.db")
ontology = config.get("ontology","BP")

#alternative routes
route=config.get("route","standard") # select standard route for analysis
integration_id=config.get("integration_id","combined")
integration_resolution=str(config.get("resolution",0.8))
celltypist_model=config.get("celltypist_model","Immune_All_Low.pkl")

include: "rules/seurat.smk"
if route == "minimal":
    rule all:
        input:
            expand(["analyses/raw/" + s + "/{params}.rds" for s in files],params=list(paramspace.instance_patterns)),
            expand(["results/" + s + "/{params}/number-of-cells-per-cluster.xlsx" for s in files],params=list(paramspace.instance_patterns)),
            expand(["results/" + s + "/{params}/umap.plot.pdf" for s in files],params=list(paramspace.instance_patterns))


elif route == "standard":

    rule all:
        input:
            expand("results/{sample}/clusteringTree/clusteringTree-{sample}.pdf",sample=files),
            expand(["results/{sample}/resolution-" + x + "/{sample}.positive-markers-forAllClusters.xlsx" for x in resolution],sample=files),
            expand(["results/{sample}/resolution-" + x + "/{sample}.number-of-cells-per-cluster.xlsx" for x in resolution],sample=files),
            expand("analyses/raw/{sample}.rds",sample=files),
            expand(["analyses/processed/" + x + "/{sample}.rds" for x in resolution],sample=files),
            expand(["results/{sample}/resolution-" + x + "/selected-markers/selected-markers-dotplot.pdf" for x in resolution],sample=files),
            expand(["results/{sample}/resolution-" + x + "/selected-markers/plots/" for x in resolution], sample=files),
            expand(["results/{sample}/resolution-" + x + "/markers/" for x in resolution], sample=files),
            expand(["results/{sample}/resolution-" + x + "/{sample}.umap.pdf" for x in resolution], sample=files),
            expand(["results/{sample}/resolution-" + x + "/enrichment/GO-enrichment-all_clusters-ontology-{ontology}.xlsx".format(ontology=ontology) for x in resolution], sample=files)

elif route == "clustree" or route == "clusteringTree":
    rule all:
        input:
            #expand("results/{sample}/clusteringTree/clusteringTree.pdf",sample=files)
            expand(["results/" + s + "/{params}/clusteringTree/clusteringTree.pdf" for s in files],params=list(paramspace.instance_patterns))

elif route == "annotate":
    rule all:
        input:
            expand(["analyses/celltypist/" + x + "/{sample}.rds" for x in resolution],sample=files)



elif route == "integration":
    files, = glob_wildcards("analyses/processed/" + integration_resolution + "/{sample}.rds")
    rule all:
        input:
            "analyses/integration/harmony/" + integration_id + "_harmony.rds",
            "analyses/integration/seurat/" + integration_id + "_seurat.rds"

else:
    pass
